4. 객체와 배열, 함수의 기초

4.1 객체
	객체 : 이름과 값을 한 쌍으로 묶은 데이터를 여러개 모은 것
	객체의 프로퍼티 : 객체에 포함된 데이터 하나(이름과 값의 쌍)
	
	ex) 컴퓨터의 구성요소 객체의 각 프로퍼티 
		프로퍼티 이름(key) 	프로퍼티 값(value)
		mouse	"로지텍"
		monitor	"삼성"
	
	자바스크립트로 객체를 생성하는 방법 2가지 
		a. 객체 리터럴을 사용하여 생성
		b. 생성자 함수를 사용해서 생성

4.1.2 객체 리터럴로 객체 생성하기

	1. var computer = { mouse: "로지텍", monitor: "삼성" };
	2. var a = computer;
		a. {...} 부분이 객체 리터럴 
		b. 객체 리터럴을 변수 computer에 대입
		c. 프로퍼티 이름과 프로퍼티 값은  콜론(:)을 사용해서 구분
		d. ({})중괄호 안에 있는 프로퍼티들은 쉼표(,)로 구분
		
		
	3. var computer = { "mouse": "로지텍", "monitor": "삼성" };
		a. 1프로퍼티 이름은 문자열로 바꾸어 작성 가능
		b. 프로퍼티 값에는 모든 데이터 타입의 값과 표현식을 대입할 수 있다.


	3. computer.mouse // ->로지텍
	computer["monitor"] // ->삼성
		a. 변수에 대입된 프로퍼티의 값을 읽거나 쓸 때는 마침표(.)연산자 또는 ([])연산자를 사용
		b. 마침표로 프로퍼티 읽거나 쓸 때는 프로퍼티 이름만 가능
		c. 대괄호로 프로퍼티를 읽거나 쓸 때는 프로퍼티 이름 또는 문자열을 반환하는 표현식을 사용 


4.1.3 프로퍼티 추가와 삭제
	
	1. computer.keyboard = "리얼포스";
		a.  없는 프로퍼티 이름에 값을 대입하면 새로운 프로퍼티 추가
		
	2. delete card.keyboard
		a.  delete 연산자를 사용하면 프로퍼티 삭제

4.1.4 in 연산자로 프로퍼티가 있는지 확인하기
	
	1. "mouse" in computer // -> true
		a. in 연산자를 사용하면 객체에 특정 프로퍼티가 있는지 확인할 수 있다.

	2. "toString" in computer // -> true
		a. in 연산자는 객체가 가진 프로퍼티와 그 객체가 상속받은 모든 프로퍼티가 조사 대상이다. 
		b. Object 객체를 computer객체가 상속 받았기 때문이다.

4.1.6 메서드
프로퍼티 저장된 값의 타입이 함수면 그 프로퍼티를 메서드라고 부른다.  4.2.13에서 설명

4.1.7 객체는 참조 타입
	a. 생성된 객체는 메모리 영역을 차지하는 한 덩어러
	b. 객체 타입의 값을 변수에 대입하면 그 변수에는 객체의 참조를 저장
	c. 변수 computer 객체를 참조하고 있다라고 한다.
	d. 변수에 저장된 객체의 참조는 다른 변수에 저장할 수 있다.






4.2 함수의 기초

4.2.1 함수 
	a. 입력값을 받으면 출력값으로 함수 값을 반환
	b. 함수의 입력 값을 인수
	c. 함수의 출력 값을 반환값

4.2.2 함수 선언문으로 함수 정의하기
	1. function square(x){
		return x * x;
	}
		a. 함수는 function 키워드를 사용해서 정의
		b. 소괄호 안에 있는 x가 인수
		c. 중괄호 안에 있는 코드가 함수가 실행하는 작업
		d. return 문이 실행 되면 제어권이 함수를 호출한 코드로 되돌가고
		e. return 문에 지정된 값은 함수의 반환값

4.2.3 함수의 이름
	1. 함수의 이름은 동사 또는 동사로 시작하는 어휘로 만들기
	2. 캐멀표기법 또는 밑줄 표기법 사용하기

4.2.4 함수 호출
	1. function square(x,y){  // x는 인자
		return x * x;
	}
	var b = square(3,4) //-> 9   3은 인자
	
		a. 함수를 호출하려면 이름 뒤에 소괄호로 인수 묶어 입력하기
		b. 함수 호출 할때 전달하는 값 인수(argument)
		c. 함수 정의문의 인수를 인자(parameter)   
	
4.2.5 인수
	1. 함수는 인수를 여러개이면 인수와 인수를 쉼표로 구분
	2. 인수를 받지 않는 함수도 정의할 수 있음

4.2.6 함수의 실행 흐름
	1. 호출한 코드에 있는 인수가 함수 정의문의 인자에 대입된다.
	2. 함수 정의 문의 중괄호 안에 작성된 프로그램이 순차적으로 실행된다.
	3. return 문이 실행되면 호출한 코드로 되돌아간다. return문의 값은 함수의 반환값이 된다.`
	4. return 문이 실행되지 않은 상태로 마지막 문장이 실행되면, 호출한 코드로 돌아간 후에 undefined가 함수의 반환값이 된다.

4.2.7 함수의 선언문의 끌어올림
	1. 자바스크립트 엔진은 변수 선언문과 마찬가지로 함수 선언문을 프로그램 첫머리로 끌어올린다.

4.2.8 값으로서의 함수
	1. 자바스크립트에서는 함수가 객체이다.
	2. 함수 선언문으로 함수를 선언하면 내부적으로 그 함수 이름을 변수 이름으로 한 변수와 함수 객체가 만들어짐
	3. 그 변수에 함수 객체의 참조가 저장
		 function square(x){
			return x*x;
		}
		
	
4.2.9 참조에 의한 호출과 값 p.101
함수는 원시 값을 넘겼을 때와 객체를 인수로 넘겼을 때 다르게 동작
	1. 인수가 원시 값일 경우 
		a. 인수에 원시 값을 넘기면 그 값 자체가 인자에 전달됨
		이를 가리켜 값의 전달 이라고 한다.
			function add1(x){
				x += 1;
			}
			const a = 3;
			const b = add1(a);
			console.log(`a = ${a}+${b}`);
	
	2. 인수가 객체일 경우 
		a. 변수 a의 복사본이 인자 p에 할당된다. 
		b. 원시 값을 인수와 넘겼을 때와 동일하게 동작
		c. 그러나 변수 a에 객체 {x:3, y:4}의 참조가 저장됨
		d. 이를 참조 전달
		e. 인자 p와 변수 a는 똑같은 객체를 참조하고 있음
		f. 따라서 p.x와 p.y를 수정하는 행위는 a.x와 a.y를 수정하는 행위와 같음
		g. 함수의 인수로 객체를 넘기면 함수 안에서 원래의 객체를 바꿀 수 있음

pass by value

pass by ref



4.2.10 변수의 유효 범위
	1. 전역 유효 범위와 지역 유효 범위
	
		a. 변수에 접근할 수 있는 범위를 그변수의 유효범위(scope)라고 한다.
		b. 유효범위를 결정하는 방법 2가지
			어휘적 범위	동적 범위
			lexical scope	dynamic scope
			프로그램 구문만으로 유효 범위를 정함	프로그램 실행 중에 유효범위를 정함
			C, JAVA, js	
			
		c. javascript변수는 변수 유효 범위 2가지
			전역변수	지역변수
			함수 바깥에서 선언된 변수로 유효범위가 전체 프로그램	함수 안에서 선언된 변수와 함수 인자로 유효범위가 선언된 함수 내부
			
		namespace??
		
	2. 변수 충돌
		a. 변수의 유효범위가 있는 이유는 ?
			프로그램의 다른 부분에서 선언된 이름이 같은 변수와 충돌하지 않도록 하기 위함
		b. 함수 각각의 지역 변수는 모두 선언된 함수 내부에서만 유효하므로 이름이 같아도 충돌하지 않음
		function first(){
		    var a = 1;
		    console.log(a)
		}
		
		function second(){
		    var a = 1;
		    console.log(a)
		}
		c. 전역 변수 이름과 지역 변수 이름이 같아지면 두 변수가 충돌
		이때 전역변수를 숨기고 지역 변수를 사용하게 됩니다.
		var a = 'global';
		function f() {
		    var a = 'local';
		    console.log(a);
		    return a;
		}
		f()
		console.log(a);
		
	3. 함수 안에서의 변수 선언과 변수 끌어올림
		a. 함수 안에서 선언된 지역 변수의 유효범위는 함수 전체
		b. 함수 중간 부분에서 변수를 선언 하더라도 변수 함수 첫머리에서 선언된 것처럼  함수 안의 다른 문장보다 먼저 생성
		c. 즉, 자바스크립트 엔진은 함수 안의 변수 선언부를 함수의 첫머리로 끌어올림
		function f(){
		    console.log(a);
		    var a = 'local';
		    console.log(a);
		    return a;
		}
		f();

	4. 함수 안에서의 변수 선언 생략
		a. 변수를 선언하지 않은 상태에서 값을 대입하면 전역 변수로 선언
		b. 이 현상은 함수 바깥에서 발생하지만 함수 안에서도 발생
		function f(){
		    a = 'local';
		    console.log(a);
		    return a;
		}
		f();
		console.log(a);
		c. var를 선언하지 않았으므로 실제로는 전역변수
		d. 따라서 프로그램의 어느 위치에서도 사용할 수 있음
		
4.2.12 함수 리터럴로 함수 정의하기
		a. 함수 리터럴은 이름이 없는 함수이므로 익명함수 또는 무명함수라고 부름
			함수 선언문	함수 리터럴(익명함수,무명함수)
			세미콜론  X	 세미콜론 O
			function square(x){	var square = function(x){
			        return x * x;	        return x * x;
			}	};
			함수 끌어올리기 사용	함수 끌어올리기 사용 X (권장)
			console.log(square(3));	console.log(square(3));
			fucntion square(x){	var square = fucntion(x){
			    return x * x;	    return x * x;
			}	};
				
			// 정상작동	//에러 : SyntaxError: Unexpected token {
			
		b. 익명함수에도 이름을 붙일 수 있음
		var square = fucntion sq (x){
		    return x * x;
		};
		sq(3);
		단, sq(3) 사용 할 수 없음 디버거에서 sq 라고 나오므로 구분이 가능함

4.2.13 객체의 메서드
	객체의 프로퍼티 중에서 함수 객체의 참조 값으로 담고 있는 프로퍼티를 가리켜 메서드라고 부른다.
	메서드를 정의할 때는 프로퍼티 값으로 함수 리터럴을 대입한다.

	var circle = {
	        center: {x:1.0, y:2.0},
	        radius: 2.5,
	        area: function(){
	                return Math.PI * this.radius * this.radius;
	        }
	};
	circle.area();

	함수 객체 안에 적힌 this는 그 함수를 메서드로 가지고 있는 객체를 가리킴
	위 코드에선 circle을 가리킴
	즉 this.radius가 circle.radius이다.

	// 원의 평행이동
	circle.translate = function(a,b) {
	        this.center.x = this.center.x + a;
	        this.center.y = this.center.y + b;
	};
	
	circle.translate(1,2);
	console.log(circle.center);

	메서드는 일반적으로 메서드가 속한 객체의 내부 데이터(프로퍼티 값)상태를 바꾸는 용도로 사용함
	일반적인 객체 지향 언어에서는 데이터와 그 상태를 바꾸는 메서드를 하나로 묶는 용도로 객체를 사용
	
	객체 지향 프로그래밍: 객체를 기본 부품으로 삼아 프로그램을 만들어 가는 기법
	
	노트 : 메서드는 프로퍼티
		a. 자바스크립트 메서드는 함수를 값으로 가진 프로퍼티
		b. 데이터와 메서드 모두 프로퍼티임
	
	
4.2.14 함수를 활용하면 얻을 수 있는 장점
	1. 재사용할 수 있다.
		a. 여러번 반복해야 하는 작업 함수를 이용하면 프로그램이 간결해진다.
	2. 만든 프로그램을 이해하기 쉽다.
		a. 함수를 사용하면 일정한 처리를 모아서 이름을 붙일 수 있다.
	3. 프로그램 수정이 간단해진다.
		a. 함수를 사용하지 않으면 똑같은 처리를 프로그램 곳곳에 작성해야 함
		b. 처리 부분을 수정 해샤 한다면 같은 작업이 반복

